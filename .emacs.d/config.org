#+TITLE: Emacs Configuration
#+AUTHOR: Vivek Raj
#+DESCRIPTION: My Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Packages
** Setting Up MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+end_src

** Setting up Use Package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install use-package))
#+end_src

** Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-bottum t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

** Themes
#+begin_src emacs-lisp
  (use-package afternoon-theme
      :ensure t
      :init
      (load-theme 'afternoon t))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t)
  (which-key-mode)
#+end_src

** Keybing Manager
#+begin_src emacs-lisp
  (use-package general
  :ensure t
  :config
  (general-evil-setup t))
  
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Vivek Raj's Emacs")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.emacs.d/logo.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Autocompleter
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src
 
** Icon Sets
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Settings

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu Mono"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))
  (setq-default line-spacing 0.12)
#+end_src

** Zoom
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Tabs and Menus
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (doom-modeline-mode 1)
#+end_src

** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (nvmap :prefix "SPC"
      "."   '(find-file :whick-key "Find File")                ;; Dired
      "e"   '(eshell :which-key "Terminal")                    ;; EShell
      ;; Window Actions
      "w q" '(evil-window-delete :which-key "Kill Window")
      "w o" '(evil-window-new :which-key "New Window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right")
      ;; Reload
      "h r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		:wk "Reload emacs config"))
  )
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src
